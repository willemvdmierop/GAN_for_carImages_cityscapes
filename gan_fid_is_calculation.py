# -*- coding: utf-8 -*-
"""GAN_FID_IS_calculation.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1yRx37VodvHuINf5kW_Pa67sQq4Qrf9Ur
"""

import sys
sys.path.append('/content/drive/My Drive/DL Classification (705)/GANs')

import os
import pathlib
from argparse import ArgumentParser, ArgumentDefaultsHelpFormatter

import numpy as np
import torch
from imageio import imread
from scipy import linalg
from torch.nn.functional import adaptive_avg_pool2d
from torch import nn
from torch.autograd import Variable
from torch.nn import functional as F
import torch.utils.data
from torchvision.models.inception import inception_v3

import numpy as np
from scipy.stats import entropy
from PIL import Image

try:
    from tqdm import tqdm
except ImportError:
    # If not tqdm is not available, provide a mock version of it
    def tqdm(x):
        return x

from inception import InceptionV3

# This code is based on: https://github.com/mseitzer/pytorch-fid

def get_activations(files, model, batch_size=50, dims=2048, cuda=False, verbose=False):
    """Calculates the activations of the pool_3 layer for all images.
        Params:
        -- files       : List of image files paths
        -- model       : Instance of inception model
        -- batch_size  : Batch size of images for the model to process at once.
                         Make sure that the number of samples is a multiple of
                         the batch size, otherwise some samples are ignored. This
                         behavior is retained to match the original FID score
                         implementation.
        -- dims        : Dimensionality of features returned by Inception
        -- cuda        : If set to True, use GPU
        -- verbose     : If set to True and parameter out_step is given, the number
                         of calculated batches is reported.
        Returns:
        -- A numpy array of dimension (num images, dims) that contains the
           activations of the given tensor when feeding inception with the
           query tensor.
        """
    model.eval()
    if batch_size > len(files):
        print(('Warning: batch size is bigger than the data size. '
               'Setting batch size to data size'))
        batch_size = len(files)
    pred_arr = np.empty((len(files), dims))

    for i in tqdm(range(0, len(files), batch_size)):
        start = i
        end = i + batch_size
        images = np.array([imread(str(f))[:,:,:3].astype(np.float32) for f in files[start:end]])
        # reshape images to (n_images, 3, height, width)
        images = images.transpose((0, 3, 1, 2))
        images /= 255
        batch = torch.from_numpy(images).type(torch.FloatTensor)
        if cuda:
            batch = batch.cuda()
        pred = model(batch)[0]
        # If model output is not scaler, apply global spatial average pooling. 
        # This happens if dimensionality not equal to 2048
        if pred.size(2) != 1 or pred.size(3) != 1:
            pred = adaptive_avg_pool2d(pred, output_size=(1, 1))
        pred_arr[start:end] = pred.cpu().data.numpy().reshape(pred.size(0), -1)
    return pred_arr

def calculate_activation_statistics(files, model, batch_size=50, dims=2048, cuda=False, verbose=False):
    """Calculation of the statistics used by the FID.
       Params:
       -- files       : List of image files paths
       -- model       : Instance of inception model
       -- batch_size  : The images numpy array is split into batches with
                        batch size batch_size. A reasonable batch size
                        depends on the hardware.
       -- dims        : Dimensionality of features returned by Inception
       -- cuda        : If set to True, use GPU
       -- verbose     : If set to True and parameter out_step is given, the
                        number of calculated batches is reported.
       Returns:
       -- mu    : The mean over samples of the activations of the pool_3 layer of
                  the inception model.
       -- sigma : The covariance matrix of the activations of the pool_3 layer of
                  the inception model.
       """
    
    act = get_activations(files, model, batch_size, dims, cuda, verbose)
    mu = np.mean(act, axis=0)
    sigma = np.cov(act, rowvar=False)
    return mu, sigma

def compute_statistics_of_path(path, model, batch_size, dims, cuda):
    files = []
    single = False
    if not os.path.isdir(path):
        raise NameError
    else:
      for filename in sorted(os.listdir(path)):
        files.append(os.path.join(path,filename))
    mu1, sigma1 = calculate_activation_statistics(files, model, batch_size, dims, cuda)
    return mu1, sigma1

def calculate_frechet_distance(mu1, sigma1, mu2, sigma2, eps=1e-6):
    """Numpy implementation of the Frechet Distance.
        The Frechet distance between two multivariate Gaussians X_1 ~ N(mu_1, C_1)
        and X_2 ~ N(mu_2, C_2) is
                d^2 = ||mu_1 - mu_2||^2 + Tr(C_1 + C_2 - 2*sqrt(C_1*C_2)).
        Stable version by Dougal J. Sutherland.
        Params:
        -- mu1   : Numpy array containing the activations of a layer of the
                   inception net (like returned by the function 'get_predictions')
                   for generated samples.
        -- mu2   : The sample mean over activations, precalculated on an
                   representative data set.
        -- sigma1: The covariance matrix over activations for generated samples.
        -- sigma2: The covariance matrix over activations, precalculated on an
                   representative data set.
        Returns:
        --   : The Frechet Distance.
        """
    mu1 = np.atleast_1d(mu1)  # Convert inputs to arrays with at least one dimension
    mu2 = np.atleast_1d(mu2)
    sigma1 = np.atleast_2d(sigma1)
    sigma2 = np.atleast_2d(sigma2)
    assert mu1.shape == mu2.shape, \
        'Training and test mean vectors have different lengths'
    assert sigma1.shape == sigma2.shape, \
        'Training and test covariances have different dimensions'
    diff = mu1 - mu2
    covmean, _  = linalg.sqrtm(sigma1.dot(sigma2), disp = False)
    if not np.isfinite(covmean).all():
        msg = ('fid calculation produces singular product; '
               'adding %s to diagonal of cov estimates') % eps
        print(msg)
        offset = np.eye(sigma1.shape[0])*eps
        covmean = linalg.sqrtm((sigma1 + offset).dot(sigma2 + offset))

    if np.iscomplexobj(covmean):
        # .imag = """The imaginary part of the array.
        if not np.allclose(np.diagonal(covmean).imag, 0, atol = 1e-3):
            m = np.max(np.abs(covmean.imag))
            raise ValueError('Imaginary component {}'.format(m))
        covmean = covmean.real
    tr_covmean = np.trace(covmean)
    return (diff.dot(diff) + np.trace(sigma1) + np.trace(sigma2) - 2*tr_covmean)

def calculate_FID_given_paths(path1, path2, batch_size, cuda, dims):
    if not os.path.exists(path1):
        raise RuntimeError(f'Invalid path: {path1}')
    if not os.path.exists(path2):
        raise RuntimeError(f'Invalid path: {path2}')

    block_idx = InceptionV3.BLOCK_INDEX_BY_DIM[dims]
    model = InceptionV3([block_idx])
    if cuda:
        model.cuda()
    mu1, sigma1 = compute_statistics_of_path(path1, model, batch_size, dims, cuda)
    mu2, sigma2 = compute_statistics_of_path(path2, model, batch_size, dims, cuda)

    FID = calculate_frechet_distance(mu1, sigma1, mu2, sigma2)

    return FID

def inception_score(path_imgs, cuda=True, batch_size=32, resize=False, splits=1):
    """Computes the inception score of the generated images imgs
    imgs -- Torch dataset of (3xHxW) numpy images normalized in the range [-1, 1]
    cuda -- whether or not to run on GPU
    batch_size -- batch size for feeding into Inception v3
    splits -- number of splits
    """
    files = []
    for filename in sorted(os.listdir(path_imgs)):
        files.append(os.path.join(path_imgs,filename))
    #print(files)
    for i in range(0, len(files)):
        images = np.array([imread(str(f))[:,:,:3].astype(np.float32) for f in files])
    images = images.transpose((0, 3, 1, 2))
    images /= 255
    imgs = images
    #print(imgs.shape)
    N = len(imgs)
    #print(N)
    #print(batch_size)
    assert batch_size > 0
    assert N > batch_size

    # Set up dtype
    if cuda:
        dtype = torch.cuda.FloatTensor
    else:
        if torch.cuda.is_available():
            print("WARNING: You have a CUDA device, so you should probably set cuda=True")
        dtype = torch.FloatTensor

    # Set up dataloader
    dataloader = torch.utils.data.DataLoader(imgs, batch_size=batch_size)

    # Load inception model
    inception_model = inception_v3(pretrained=True, transform_input=False).type(dtype)
    inception_model.eval();
    up = nn.Upsample(size=(299, 299), mode='bilinear').type(dtype)
    def get_pred(x):
        if resize:
            x = up(x)
        x = inception_model(x)
        return F.softmax(x).data.cpu().numpy()

    # Get predictions
    preds = np.zeros((N, 1000))

    for i, batch in enumerate(dataloader, 0):
        batch = batch.type(dtype)
        batchv = Variable(batch)
        batch_size_i = batch.size()[0]

        preds[i*batch_size:i*batch_size + batch_size_i] = get_pred(batchv)

    # Now compute the mean kl-div
    split_scores = []

    for k in range(splits):
        part = preds[k * (N // splits): (k+1) * (N // splits), :]
        py = np.mean(part, axis=0)
        scores = []
        for i in range(part.shape[0]):
            pyx = part[i, :]
            scores.append(entropy(pyx, py))
        split_scores.append(np.exp(np.mean(scores)))

    return np.mean(split_scores), np.std(split_scores)

#path_fake = "/content/drive/My Drive/DL Classification (705)/GANs/Fake_images/Fake_4500"
#IS_mean, IS_std = inception_score(path_imgs=path_fake,cuda = True, batch_size = 5)
#print("IS mean",IS_mean, "IS_std", IS_std)

from random import randint
import time
files = []
path_real = "/content/drive/My Drive/DL Classification (705)/GANs/Real_images_Green"
path_fake = "/content/drive/My Drive/DL Classification (705)/GANs/Fake_images_green"
path_imgs = "/content/drive/My Drive/DL Classification (705)/GANs/Fake_images_green"
paths = []
for filename in sorted(os.listdir(path_imgs)):
  paths.append(os.path.join(path_imgs,filename))
print(paths[-1])
epochs = np.arange(0,3501,500)
print(epochs)
FID_list = []
IS_mean_list = []
IS_std_list = []
files = []

for _,value in enumerate(paths):
  start = time.time()
  FID = calculate_FID_given_paths(path_real, value, batch_size=1, cuda = True, dims = 2048)
  FID_list.append(FID)
  print("The FID for our generated images is {}, calculation of FID took {} seconds".format(FID,time.time()-start))
  IS_mean, IS_std = inception_score(value,batch_size=4, cuda = True)
  IS_mean_list.append(IS_mean)
  IS_std_list.append(IS_std)
  print("The inception score mean score is {}, IS std is {} ,calculation of IC took {} seconds".format(IS_mean,IS_std,time.time()-start))

print("Finished generating FID for our images. this is the list", FID_list)
print("\nFinished generating IC for our images. this is the list", IS_mean)
np.savetxt("/content/drive/My Drive/DL Classification (705)/GANs/FID_list_green.csv", FID_list,delimiter = ',')
np.savetxt("/content/drive/My Drive/DL Classification (705)/GANs/IS_list_green.csv", IS_mean_list,delimiter = ',')
print("Saved the FID list and the IS list")

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
epochs = np.arange(0,3501,500)
df = pd.read_csv("/content/drive/My Drive/DL Classification (705)/GANs/FID_list_green.csv")
FID_list = np.array(df)
print(FID_list)
x = epochs[:(len(FID_list))]
plt.plot(x,FID_list,linewidth = 2.0)
plt.xlabel("Epochs")
plt.ylabel("FID")
plt.title("The FID of our generated images")
plt.grid()
plt.show()

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
epochs = np.arange(0,3501,500)
df = pd.read_csv("/content/drive/My Drive/DL Classification (705)/GANs/IS_list_green.csv")
IS_mean_list = np.array(df)
print(IS_list)
x = epochs[:(len(IS_mean_list))]
plt.plot(x,IS_mean_list,linewidth = 2.0)
plt.xlabel("Epochs")
plt.ylabel("Inception score")
plt.title("The IS of our generated images")
plt.grid()
plt.show()



'''
import time
path_real = "/content/drive/My Drive/DL Classification (705)/GANs/Real_images"
path_fake = "/content/drive/My Drive/DL Classification (705)/GANs/Fake_images"
start = time.time()
print("started calculating FID")
FID = calculate_FID_given_paths(path_real, path_fake, batch_size=1, cuda = False, dims = 2048)
print("The FID for our generated images is {}, calculation of FID took {} seconds".format(FID,time.time()-start))
start = time.time()
print("started calculating FID for only real images")
FID = calculate_FID_given_paths(path_real, path_real, batch_size=1, cuda = False, dims = 2048)
print("The FID for only real images is {}, calculation of FID took {} seconds".format(FID,time.time()-start))
'''

